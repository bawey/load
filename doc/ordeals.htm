<html>
    <head>
        <title>Esperiences: par espera ad astra</title>
        <style type="text/css">
            code {
                font-size: 1.1em;
                color: navy;
                padding: 4px;
                line-height: 1.7em;
            }
            code.error{
                color: red;
            }
            code.wrong{
                text-decoration:line-through
            }
        </style>
    </head>
    <body>
        <ul>
            <li><h3>Scripts: passing values to expressions</h3><p>
                    It doesn't seem possible to directly bind expressions to <i>select</i> statements like:
                    <br /><code>on Something callMe(select field as alias from SomeStream)</code><br />
                    Instead you need to pass a column like: 
                    <br /><code>on SomeStream as s set someVar = someFun(s.anyField)</code><br />
                    <code>
                        StringBuilder script = new StringBuilder(); <br />
                        script.append("create expression double js:getNumber(n) ["); <br />
                        script.append("importClass(java.lang.System);"); <br />
                        script.append("System.out.println(\"received value: \"+n+\" of type: \"+typeof(n));"); <br />
                        script.append("if(n!==null){ System.out.println(n);"); <br />
                        script.append("n}else{-8}"); <br />
                        script.append("]"); <br />
                        <br />
                        ep.createEPL(script);<br />
                        <br />
                        ep.createEPL("create window IndirectAvgTrgRate.win:length(2) as (value double)"); <br />
                        ep.createEPL("insert into IndirectAvgTrgRate select avg(r.rate) as value from rates as r"); <br />
                        <br />
                        ep.createEPL("create variable double avgRate=0");   <br />
                    </code><br />
                    this always results in null received by getNumber() <br />
                    <code>ep.createEPL("on IndirectAvgTrgRate as iatr set avgRate = getNumber(iatr.value)");  </code><br />
                    this however sets the average fine, without passing it through getNumber() <br />
                    <code>ep.createEPL("on IndirectAvgTrgRate as iatr set avgRate = (iatr.value)"); </code><br />
                    this however works fine, the value is sent through the getNumber and average is set equal to last observed value <br />
                    <code>ep.createEPL("on rates as r set avgRate = getNumber(r.rate)"); </code><br />
                </p></li>
            <li>
                <h3>Triggered selection</h3>
                <p>
                    When doing: <br />
                    <code>on SomeEvent select * from SomeStream</code><br />
                    the listener receives not a <code>MapEventBean</code> where the selection results are under <code>"stream_0"</code>
                    and the triggering event under <code>"stream_1"</code> </br>
                    Same goes for patterns, but there is no <code>"stream_1"</code>, like:
                    <code>on pattern[every SomeEvent] select * from SomeStream</code><br />
                    However, specifying an alias makes the listener receive only one stream, like: <br />
                    <code>on SomeEvent select s.* from SomeStream as s</code>
                </p>
            </li>
            <li>
                <h3>(uncertain) Stream splitting and 'output all'</h3>
                It seems impossible to do: <br />
                <code>
                    on pattern[every timer:interval(1 sec)] <br/>
                    insert into SomeStream1 select * from ... <br />
                    insert into SomeStream2 select * from ... <br />
                    output all <br />
                </code>
                But it's fine to do so with: <code> on SomeEvent ... </code> and no subqueries as they are not allowed when splitting streams.
            </li>
            <li>
                <h3>Stream-splitting syntax + select</h3>
                This works: <br />
                <code>
                    on pattern[every timer:interval(500 msec)] select lastever(rate) from rates <br/>
                </code>
                This does not: <br />
                <code>
                    on pattern[every timer:interval(500 msec)] select avgRate
                </code><br />
                due to:
                <code class="error">
                    Required insert-into clause is not provided, the clause is required for split-stream syntax [on pattern[every timer:interval(500 msec)] select avgRate]
                </code><br />
                where <code>avgRate</code> is a variable. <br />
                However, <code>on pattern[...] select avgRate from rates</code> solves the problem.
            </li>
            <li>
                <h3>Reference fields from sub-queries</h3>
                <p>Have not seen it in documentation (doesn't mean it's not there), but such construct is allowed and useful: <br />
                    <code>create variable Double avgTrgRate=null <br />
                        create variable Double indirectAvgTrgRate = null <br />
                        create variable Double lastEverRate=null <br />
                        on pattern[every r=rates] set lastEverRate = r.rate, 
                        indirectAvgTrgRate = (select avg(rate) as rate from rates).rate, 
                        avgTrgRate = Math.round(averageTriggerRate(indirectAvgTrgRate,lastEverRate))</code> <br/>
                    It should also fix the "statement returned multiple rows" error.
                </p>
            </li>
            <li>
                <h3>Dealing with nulls (coz ya ain't know what ya select)</h3><p></p>
            </li>
            <li>
                Loading module crashes on scripts with semicolons. 
            </li>
            <li>
                <h3>Conclusion streams hierarchy...</h3>
            </li>
            <li>
                <h3>Annotations to link text-based epl with java</h3>
            </li>

            <li>
                
                <h3>Replacing internal timer</h3>
                <p>
                    You don't get warnings in your logs when attempting to set past / current time using <code>CurrentTimeEvent</code>. <br />
                    You however get them when using <code>CurrentTimeSpanEvent</code> and can get what's going wrong. <br />
                    Can esper start in the past?

                </p>
            </li>
            <li>
                <h3>every vs every-distinct</h3>
                <p>It seems like <code>every</code> tends to produce some repeated results. Then you switch between distinct and normal and it seems not to differ again. </p>
                <p>PAY ATTENTION TO the BRACES: every A -> B is not every (A->B)</p>
            </li>
            <li>
                Blocked paths. Here will be a matrix of allowed and forbidden combinations of esper techniques along with epl examples <br />
                - cannot do "on rstream A ..." <br />
                - cannot do delete from B as b where b.id in (select rstream A.id); <br />
                - stream splitting with contained events...? <br />
                - <code>delete from FedDeadPressure as f where f.fedId in (select * from FmmInput(fractionWarning<0.01, fractionBusy<0.01)[dtRelevantFedIds(context, geoslot, io)@type(FedId)].std:lastevent());</code> yields <br />
                <code>Unexpected exception starting statement: Invalid null or zero-element list of select clause expression types</code><br/>
                - in subqueries you cannot use references to streams made available higher up, like:<br/>
                <code>on FmmInput(fractionBusy<0.01, fractionWarning<0.01) as fmi 
    delete from FedDeadPressure fdp where fdp.fedId in (select * from FmmDeadtime(fedId=fmi.fedId)[mainFedIds@type(DeadtimeRecoveredFedId)]);</code><br />
                - <code>on FrlCtlLnk as ctl <br/>
    insert into FrlBackpressure select ((ctl.fifoAlmostFullCnt - tmp.fifoAlmostFullCnt) / (ctl.clockCount-tmp.clockCount)) as bpFraction, <br />
        ctl.fedId as fedId, ctl.timestamp.getTime() as timestamp <br />
        from FedBackpressureTemp as tmps</code><br />
        Another problem. Splitting stream with a nested select... ?

            </li>
            <li>
                This worked: <br />
                <code>
                    create schema DeadtimeRecoveredFedId as Integer;
                    @Description('Populating DeadtimeRecoveredFedId')
insert into DeadtimeRecoveredFedId select * from FmmInput(fractionWarning<0.01, fractionBusy<0.01)[dtRelevantFedIds(context, geoslot, io)@type(DeadtimeRecoveredFedId)].std:lastevent();
                </code>
            </li>

            <li>
                <h3>Statement Execution Order</h3>
                <p>
                    <code>
                        @Verbose(label='orderTest',extraNfo='first') <br />
                        select count(*) from FrlCtlLnk; <br /><br />

                        @Verbose(label='orderTest',extraNfo='second') <br />
                        select count(*) from FrlCtlLnk; <br /><br />

                        @Verbose(label='orderTest',extraNfo='third') <br />
                        select count(*) from FrlCtlLnk; <br />
                    </code>
                    yields a random order each time.
                </p>
            </li>
            <li>
                <h3>Calling 'get' on any Java object from EPL</h3>
                <code>select tuple(streamNames, ratePerStream).get('A') from StorageManagerPerformance;</code> <br />
                <code class="error">Date-time enumeration method 'get' requires either a Calendar, Date or long value as input or events of an event type that declares a timestamp property but received java.util.Map</code>
            </li>
            <li>
                <h3>Inline if?</h3>
                <code>(case when result='' then '' else ',' end)</code>
            </li>
            <li>
                <h3>What does count(*) actually count...</h3>
                <p>Events in a window or all events that heve ever gone through a stream.</p>   
            </li>
            <li>
                <h3>Aggregates 101</h3>
                it's just weird...
                <code>select window(*).aggregate(0, (result, item) => result + item.rate) as totalRate
from RecentL1Rates;</code>
            </li>

            <li><h3>Count distinct returns 0 when 'whered' using different view</h3>
            <p>
            <code>select count(distinct bxNumber) as cnt from FrlCtlLnk.std:unique(fedId) <br />
    where (select max(timestamp)-min(timestamp) from ConsecutiveZeroL1Rates ) >  minStuckTime;</code> <br />
            It might be that aggregation function rejects all rows 'whered' by some unrelated window, whereas selecting single rows in such case is fine. (Snippet above produces expected output without the 'where' clause.) <br />
            <code>select bxNumber from FrlCtlLnk.std:unique(fedId) <br>
    where (select max(timestamp)-min(timestamp) from ConsecutiveZeroL1Rates ) > minStuckTime;</code><br />
            It works as above, on its own, and works if you put it all together and use 'having': <br />
            <code>select distinct count(distinct ctl.bxNumber) as bxNumbers, max(deads.timestamp)-min(deads.timestamp) as duration from FrlCtlLnk.std:unique(fedId) as ctl, L1DeadRates as deads <br>
    having count(distinct ctl.bxNumber) is not null <br>
    and count(distinct ctl.bxNumber) > 1 <br>
    and max(deads.timestamp)-min(deads.timestamp) > deadRateTimeout;</code>
            </p>
        </li>
            <li>
                <h3></h3>
                <p>
                    This is not fine by esper: [<code class="error">Incorrect syntax near '.' expecting end of input but found a dot '.'</code>] <br />
                    <code>
                        on pattern[every DeadL1RateTimer(elapsed>minStuckTime)] insert into DeadL1RateBxHistogram <br />
    select count(fedId) as support, bxNumber, max(timestamp.getTime()) as timestamp from FrlCtlLnk.std.unique(fedId) group by bxNumber; <br />
                    </code>
                    Neither is this: [<code class="error">Named window 'FrlCtlLnk' has not been declared</code>] <br />
                    <code>
on pattern[every DeadL1RateTimer(elapsed>minStuckTime)] insert into DeadL1RateBxHistogram <br />
    select count(fedId) as support, bxNumber, max(timestamp.getTime()) as timestamp from FrlCtlLnk group by bxNumber; <br />
                    </code>
                    But this is fine: <br />
                    <code>
create window ForYourStupidSatisfaction.std:unique(fedId) as select * from FrlCtlLnk; <br/>
insert into ForYourStupidSatisfaction select * from FrlCtlLnk; <br/> <br/>
on pattern[every DeadL1RateTimer(elapsed>minStuckTime)] insert into DeadL1RateBxHistogram <br/>
    select count(fedId) as support, bxNumber, max(timestamp.getTime()) as timestamp from ForYourStupidSatisfaction group by bxNumber;</code>
                </p>
            </li>
            <li>
                <h3>Streams populated with upsert</h3>
                <p>When updating both, otherwise insert or remove respectively.</p>
            </li>
            <li><h3></h3>Joining remove and insert stream
            <p>
                <code class="wrong">select fedId, date(timestamp) as time, bpFraction from FedBackpressure as r where r.fedId not in (select rstream i.fedId from FedBackpressure as i);</code> <br />
                <code class="fine">select rstream fedId, date(timestamp) as time, bpFraction from FedBackpressure as r where r.fedId not in (select i.fedId from FedBackpressure as i);</code>
            </p>
            </li>
            <li>
                <h3>Case's (lack of) flexibility</h3>
                <p>on pattern[every timer:interval(333 msec)] set deadRateElaplsed = (select case when (3>1) then (12 as dbt) else (0 as dbt) end from L1DeadRates);</p>
            </li>
            <li>
                <p>The unidirectional keyword instructs the engine to evaluate the join only when an event arrives from the single stream that was marked with the unidirectional keyword. In this case no data window should be specified for the stream marked as unidirectional since the keyword implies that the current event of that stream triggers the join.</p>
            </li>
            <li>
                <h3></h3>
                <p>
                    Where <code>deadRateTimeout</code> and <code>deadRateElapsed</code> are variables. <br/>
                    <code>
                        select count(distinct bxNumber) from pattern[every timer:interval(5 sec)] unidirectional, FrlCtlLnk.std:unique(fedId) where deadRateTimeout&lt;deadRateElaplsed;
                    </code>
                    <br />
                    Yields ones which seems to be a useful output.
                    <br />
                    <code>
                        select count(distinct bxNumber) from FrlCtlLnk.std:unique(fedId) where deadRateTimeout&lt;deadRateElaplsed;
                    </code>
                    <br>
                    Yields only zeroes, seemingy discarding any FrlCtlLnk events as not matching the constraint imposed on a variable (as opposed to Event's properties).
                </p>
            </li>

            <li>
                <h3>No logic in patterns</h3>
                <p>
                    Impossible to do something like: <br />
                    <code class="error">on pattern[every timer:interval(3 sec) and someVariable>-6]</code>
                </p>
            </li>

            <li>
                <h3>Snapshot vs continuous access, intuition</h3>
                <p>
                    Seems like the triggered access to windows (using patterns for instance) is much better when it comes to obtaining reliable aggregate values than continous, 'where'-constrained approach. So: <br />
                    <code class="error">select count(distinct color) from CarEvent.std:unique(carId) where someOtherVariable>threshold</code><br />
                    is likely to quirk giving zeros (the condition under 'where' close ain't directly related to the CarEvent). However, if the <code>someOtherVariable</code> was a <code>win.length(1)</code> window instead, the following would be fine: <br />
                    <code>select count(distinct color) from pattern[every SomeOtherVariableEvent(value>threshold)] unidirectional, CarEvent.std:unique(carId)</code> <br/>
                    The idea behind the first snippet was actually to achieve the same behavior as in the latter example, yet without using a window for the variable. Failed.
                </p>
            </li>


            <li>
                <h3>Cryptic underlying Java exceptions surfacing</h3>
                <p>
                    The following statement yields an <code>Array index out of bounds exception</code> thrown somewhere within Esper.<br />
                    <code class="error">
                    insert into BxDistribution select count(distinct bxNumber) as groups, timestamp.getTime() as timestamp from pattern[every ZeroRateTimer(elapsed>deadRateTimeout)] unidirectional, FrlCtlLnk.std:unique(fedId)
    having count(distinct bxNumber) > 1;</code><br/>
                    As it turned out, some <code>FrlCtlLnk</code> arrived with null Date. The following fixes the problem without actually changing the output that is of any concern: <br />
                    <code>insert into BxDistribution select count(distinct ctl.bxNumber) as groups, (case when ctl.timestamp is not null then ctl.timestamp.getTime() else 0 end) as timestamp from pattern[every ZeroRateTimer(elapsed>deadRateTimeout)] unidirectional,
    FrlCtlLnk.std:unique(fedId) as ctl where ctl is not null having count(distinct bxNumber) > 1;
</code>
                </p>

            </li>
            <li>
                <h3>The <code>on... set...</code> limitations</h3>
                <p>
                    Cannot be followed by select, making it impossible, for instance, to set the value based on some aggregation of events A upon arrival of an event B.
                    <code>
                    </code><br/>
                </p>
            </li>
            <li>
                <h3>Do expr-window events to-be-dropped get to attached statements?</h3>
                <p>
                    
                    <code>
                    </code><br/>
                </p>
            </li>
            <li>
                <h3></h3>
                <p>
                    
                    <code>
                    </code><br/>
                </p>
            </li>
            <li>
                <h3>Act upon first event or any other with a value different then the previous</h3>
                <p>
                    Using window <code>std:firstunique</code> puts whatever comes into the insert stream, even if it doesn't stay within the window. The <code>std:expr</code> window does the same thing. What works is the <code>match_recognize</code> with <code>prev</code> like in the following: <br />
                    <code>
                        select * from BxDistribution match_recognize( <br />
                        measures A.groups as grps <br />
                        pattern (A)  <br />
                        define A as prev(A.groups) is null or A.groups != prev(A.groups, 1) <br />
                        );      
                    </code>
                </p>
            </li>
            <li>
                <h3>match_recognize doesn't recognize consecutive events for window of length 1, but works with prev</h3>
                <p>
                    <code>
                        select fetchstamp, timestamp from BxnClustersCount match_recognize( <br />
    measures B.clusters as clusters, B.fetchstamp as fetchstamp, B.timestamp as timestamp <br />
    pattern (B) <br />
    define B as B.clusters<=1 and prev(B.clusters,1)>1 <br />
); <br />
                    </code>
                    <code class="error">pattern (A B)</code> will not work in this case as <code>BxnClustersCount</code> is a window of length 1.

                </p>
            </li>
            <li>
                <h3>Issues with context</h3>
                <p>
                    Context is a reserved keyword and: <br />
                    <code>select context as trololo from EventProcessorStatus;</code> - OK<br />
                    <code class="error">select context.substring(0,1) as trololo from EventProcessorStatus;</code><br />
                    complains about reserved keyword. Use `` :)
                </p>
            </li>
            <li>
                <h3>Syntax irregularities</h3>
                <p>on Event as sth but on pattern[sth=Event]</p>
                <p>typename sometimes before (variables), sometimes after identifier</p>
            </li>
			<li>
				I wanted to use custom aggregation methods for preparing comma separated lists and found out something disturbing.

For a query like this:
expression subsystems { (select concat(SUBSYS) from levelZeroFM_subsys.std:unique(SUBSYS) where INOUT='In') } select sid, subsystems() as subsys from pattern [every RunStop] unidirectional;

The grouping method turns out to be ran thousands of times without any output being produced (lack of output is in this case desired). For the latter the from pattern [...] unidirectional works fine as a trigger, yet under the hood it seems to be doing lots of unnecessary processing.

This is quite strange for me, as I really would expect Esper only to perform the window updating continuously with accessing and grouping performed in a more "on-demand" manner.
Some long time ago I also hoped it does not create duplicate objects for the inline defined windows like SomeWindow:std.unique(id), but now I am increasingly afraid it is not so and I should actually keep track of all windows and their respective contents to reuse where possible. Not that I have not tried, but machine would probably do such things much better.|
		
			</li>
        </ul>

			

		



    </body>
</html>
