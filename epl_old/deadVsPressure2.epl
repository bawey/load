module deadVsPressure2;

create window FedBackpressure.std:unique(fedId) as select * from FrlBackpressureStream;

create window FedDeadtime.std:unique(fedId) as (fedId int, dtFraction double, timestamp long, mainFedIds int[]);

create window FedDTBP.std:unique(fedId) as (bpTime long, dtTime long, bpFraction double, dtFraction double, fedId int);

create schema DtOrBpGone as (fedId int, timestamp long, isBp boolean);

on FrlBackpressureStream bps merge into FedBackpressure bp where bps.fedId = bp.fedId
	when not matched and bps.bpFraction > bpBound
		then insert select *
	when matched and bps.bpFraction > bpBound
		then update set bp.bpFraction = bps.bpFraction, bp.timestamp = bps.timestamp
	when matched and bps.bpFraction <= bpBound
		then insert into DtOrBpGone select bps.fedId as fedId, bps.timestamp as timestamp, true as isBp
		then delete;


on FmmInput as fmm merge into FedDeadtime dt where fmm.fedId = dt.fedId
	when not matched and fmm.fractionBusy + fractionWarning > dtBound
		then insert select fedId as fedId, fractionBusy+fractionWarning as dtFraction, timestamp.getTime() as timestamp, mainFedIds(fmm.fedId) as mainFedIds
	when matched and fmm.fractionBusy+fmm.fractionWarning > dtBound
		then update set dt.dtFraction = fmm.fractionWarning+fmm.fractionBusy, dt.timestamp = fmm.timestamp.getTime()
	when matched and fmm.fractionBusy+fmm.fractionWarning <= dtBound
		then insert into DtOrBpGone select fmm.fedId as fedId, fmm.timestamp.getTime() as timestamp, false as isBp
		then delete;


insert into FedDTBP select d.timestamp as dtTime, b.timestamp as bpTime, d.dtFraction as dtFraction, b.bpFraction as bpFraction, b.fedId as fedId 
	from FedDeadtime as d, FedBackpressure as b 
	where (b.fedId=d.fedId or in_array(b.fedId, d.mainFedIds)) and time_span(d.timestamp, b.timestamp) <= deadPressureSpan;

on pattern[
	every (x=DtOrBpGone)] 
	delete from FedDTBP fdp where fdp.fedId = x.fedId;

on DtOrBpGone(isBp=true) as bps delete from FedDTBP fdp 
	where in_array(bps.fedId, mainFedIds(fdp.fedId)) and mainFedIds(fdp.fedId).allOf( v => v not in (select fedId from FedBackpressure));



@Verbose(label='doubtful', fields={'time','fedId','bpFraction'})
select rstream fedId, date(timestamp) as time, bpFraction from FedBackpressure as r where r.fedId not in (select i.fedId from FedBackpressure as i);

@Verbose(label="output-devel", extraNfo="Incoming BP", fields={'time', 'fedId' , 'bpFraction'})
select date(timestamp) as time, fedId, bpFraction from FedBackpressure;

@Priority(10)
@Verbose(label="output-devel", extraNfo='Leaving BP', fields={'time', 'fedId' , 'bpFraction'})
select rstream date(timestamp) as time, fedId, bpFraction from FedBackpressure where fedId not in (select fedId from FedBackpressure);

@Verbose(label="output-devel", extraNfo="Incoming DT", fields={'time', 'fedId' , 'dtFraction'})
select date(timestamp) as time, fedId, dtFraction from FedDeadtime;

@Priority(10)
@Verbose(label="output-devel", extraNfo='Leaving DT', fields={'time', 'fedId' , 'dtFraction'})
select rstream date(timestamp) as time, fedId, dtFraction from FedDeadtime where fedId not in (select fedId from FedDeadtime);

@Verbose(label="output-devel", extraNfo='No more BP+DT', fields={'fedId'})
select rstream fedId from FedDTBP where fedId not in (select fedId from FedDTBP);