module performers;

create variable Double tolerance = 2.79;

@Description('window holding only the most-recent info per context')
create window Reads.std:unique(name) as (name String, yield long, units int);
insert into Reads select context as name, nbProcessed as yield, epMacroStateInt.size() as units from EventProcessorStatus;

create window GroupStats.std:unique(units) as (units int, avrg double, sdev double);

on pattern[every timer:interval(1000 msec)] 
	insert into GroupStats select r.units as units, avg(r.yield) as avrg, stddev(r.yield) as sdev from Reads as r group by r.units;

@Description('/** simply put, count all **/')
create window Overperformers.std:unique(name) as (name String, units int, yield long);
on GroupStats as gs 
	insert into Overperformers select r.* from Reads as r where r.units=gs.units and r.yield > gs.avrg+tolerance*gs.sdev;

@Description('/** try doing something more elaborate for under-achievers **/')
create window Underperformers.std:unique(name) as (name String, units int, yield long);
on GroupStats as gs insert into Underperformers
	select r.* from Reads as r where r.units=gs.units and r.yield < gs.avrg-tolerance*gs.sdev;
on GroupStats as gs 
	delete from Underperformers u where gs.units = u.units and (select r.yield from Reads as r where r.name = u.name) > gs.avrg-tolerance*gs.sdev;
on GroupStats as gs 
	delete from Overperformers o where gs.units = o.units and (select r.yield from Reads as r where r.name = o.name) < gs.avrg+tolerance*gs.sdev;

/**
@Verbose
select * from GroupStats;
@Verbose
select 'under' as title, u.*, gs.avrg-tolerance*gs.sdev as threshold from Underperformers as u, GroupStats as gs where u.units = gs.units;
@Verbose
select 'over' as title, o.*, gs.avrg+tolerance*gs.sdev as threshold from Overperformers as o, GroupStats as gs where o.units = gs.units;
**/

@Watched(label='#Underperformers')
select count(*) from Underperformers;
@Watched(label='#Overperformers')
select count(*) from Overperformers;
