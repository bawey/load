/** CREATE SCHEMAS, WINDOWS, VARIABLES **/
@Description('defines the quasi-period of rate update. represents a number of subrate updates required to update the rate')
create variable int rateUpdateCoeff = 2;

@Description('Schema to pass the number of subrateSources through')
create schema SubrateSrcNo as (cnt long);

@Description('variable to keep the current Session ID')
create variable String sid = '';

@Description('the last timestamp of EventManager flashlist with desired SessionID')
create variable Long lastEVMtimestamp = 0;

@Description('create for EVM data. Keep only the most recent record per context-lid pair. Also, discard events older than 30 seconds')
create window L1Subrates.std:unique(url,lid).win:time(30 sec) as (subrate Double, url String, lid String, timestamp Long);

@Description('Window for all the L1Rates observed over the previous 60 seconds. ')
create window L1Rates.win:expr(timestamp>max(timestamp)-60000 and current_count<60) as (rate double, timestamp Long);

create variable Double avgTrgRate=null;
create variable Double indirectAvgTrgRate = null;
create variable Double lastEverRate=null;

@Description('Defines the jump threshold')
create variable double rateJumpMargin = 0.1;

/** DEFINE LOGIC **/

@Watched(label="SubrateSrcNo")
insert into SubrateSrcNo select count(distinct lid) as cnt from EVM.win:expr(sessionid=sid); 

@Watched(label='rateUpdateCoeff')
on SubrateSrcNo as ssn set rateUpdateCoeff = cast(ssn.cnt,int);

@Description('Helper to filter out null average L1Rates')
create expression double js:averageTriggerRate(n, m)[
	if(n!=null){ n }
	else if(m!=null){ m }
	else { 0 }
];

on levelZeroFM_subsys(SID!=sid, FMURL like '%PublicGlobal%') as l set sid=l.SID;

@Description('populate L1Subrates with EventManagers data for current SessionID')
insert into L1Subrates select deltaN/deltaT as subrate, context as url, lid, timestamp.getTime() as timestamp from EVM where sessionid=sid and deltaT>0;

@Watched(label='lastEVM time')
on EVM(sessionid=sid) as evm set lastEVMtimestamp=evm.timestamp.getTime();

@Description ('Populate L1Rates with subsequently observed sums over the L1Subrates')
on pattern[every [rateUpdateCoeff] L1Subrates] insert into L1Rates select sum(subrate) as rate, max(timestamp) as timestamp from L1Subrates;

@Description('Updates the average rate value for the last (up to) 60 seconds. Uses a chain of variables to avoid Math.round(null) call.')
on pattern[every r=L1Rates] set lastEverRate = r.rate, indirectAvgTrgRate = (select avg(rate) as rate from L1Rates).rate, avgTrgRate = Math.round(averageTriggerRate(indirectAvgTrgRate,lastEverRate));

@Priority(0)
on pattern[every a=L1Rates(rate>(avgTrgRate*(1+rateJumpMargin)) or rate < (avgTrgRate*(1-rateJumpMargin)))] delete from L1Rates;


/** ADD OUTPUTS **/

@Description('Notify about rate jumps. Should send some error instead')
@Verbose(label='output', extraNfo='Level one trigger rate jump!', fields={'time','average','last'})
@Priority(10)
select avgTrgRate as average, a.rate as last, date(lastEVMtimestamp) as time from pattern[every a=L1Rates(rate>(avgTrgRate*(1+rateJumpMargin)) or rate < (avgTrgRate*(1-rateJumpMargin)))];


@Description('Show the last average trigger rate')
@Watched
select avgTrgRate as value, lastEVMtimestamp as timestamp, 'avg rate' as label from L1Rates;


@Description('Display the last rate. Looks weird, right?')
@Watched
select prior(1,rate) as value, 'trigger rate' as label, lastEVMtimestamp as timestamp from L1Rates;


@Watched(label='EVM total')
select count(*) from EVM;

