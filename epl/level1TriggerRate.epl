#include "system.epl"

@Description('the last timestamp of EventManager flashlist with desired SessionID')
create variable Long lastEVMtimestamp = 0;
on EVM set lastEVMtimestamp = timestamp.getTime();

create variable Double avgTrgRate=null;
create variable double rateJumpMargin = 0.1;
create variable int minimumRatesForAverage = 3;

@Description('Stream broadcasting L1 trigger rates')
create objectarray schema L1RatesStream as (rate double, timestamp Long, systime Long, subratesCnt Long);

@Description('Window for all the L1Rates observed over the previous 60 seconds. ')
create window L1Rates.win:time(60 seconds) as select * from L1RatesStream;

insert into L1Rates select * from L1RatesStream;


/** count the rate every time the EVM events stop coming in **/
insert into L1RatesStream 
	select
		Math.round(coalesce(sum(deltaN/deltaT),0)) as rate,
		max(timestamp.getTime()) as timestamp,
		current_timestamp() as systime,
		count(*) as subratesCnt
	from
		EVM(deltaT>0, sessionid=sid).win:time(10 msec),
		pattern[every EVM->(timer:interval(1 msec) and not EVM)] unidirectional;
		

create objectarray schema L1TrgRateChange as (systime long, srctime long, rate double, avgrate double);

@Priority(10)
@Description('Updates the average rate value for the last (up to) 60 seconds.')
on pattern[every r=L1Rates] set 
	avgTrgRate = coalesce((select avg(rate) as rate from L1Rates).rate, r.rate, 0);	


@Description('Notify about rate jumps. Should send some error instead')
@Priority(9)
insert into L1TrgRateChange
	select 
		avgTrgRate as avgrate, 
		a.rate as rate, 
		lastEVMtimestamp as srctime, 
		current_timestamp() as systime
	from 
		pattern[every a=L1Rates] 
	where 
		(select count(*) from L1Rates)>minimumRatesForAverage;


@Verbose(label="output", fields={"systime","rate","avgrate","srctime"}, extraNfo="Level 1 TRG rate jump")
on L1TrgRateChange(Math.abs(rate-avgrate)>rateJumpMargin*avgrate) as jump 
	select and delete 
		date(jump.systime) as systime,  
		jump.rate as rate, 
		jump.avgrate as avgrate, 
		date(jump.srctime) as srctime 
	from 
		L1Rates as l1 limit 1;


@Watched(label='AVG rate')
select avgTrgRate as value from L1Rates;

@Watched(label="TRG rate")
select rate as value from L1Rates;