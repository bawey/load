#include "deadtimeAndBackpressure.epl"

create objectarray schema FedIndicators as (fedSrcId int, dBusy long, dWarning long, dOos long, dError long, dReady long, dTime long, timestamp Date);

insert into FedIndicators select * from FmmInput match_recognize(
	partition by fedSrcId
	measures B.timeTag - A.timeTag as dTime, A.fedSrcId as fedSrcId, B.integralTimeBusy-A.integralTimeBusy as dBusy, B.integralTimeError-A.integralTimeError as dError,
				B.integralTimeOOS-A.integralTimeOOS as dOos, B.integralTimeWarning-A.integralTimeWarning as dWarning, B.integralTimeReady-A.integralTimeReady as dReady,
				B.timestamp as timestamp
	pattern (A B)
	/** seems like you cannot omit the define part so a placeholder is used **/
	define A as A is not null, B as B is not null
);

@Verbose(label="output", fields={'timestamp','fedSrcId', 'dIllegal', 'dTime'}, extraNfo='FED in illegal state')
select timestamp, fedSrcId, dTime, dTime-(dBusy+dWarning+dError+dOos+dReady) as dIllegal from FedIndicators((dBusy+dWarning+dError+dOos+dReady)=0 and dTime >0);