@Description('need to filter out feds that are currently masked out')


@Description('schema with current backpressure values for kontext, slotNumber, linkNumber')
create schema FrlBackpressure as (bpFraction double, kontext String, slotNumber Integer, linkNumber Integer, timestamp Long);
@Description('populating current backpressure stream')
on pattern[every a=frlcontrollerLink(fifoAlmostFullCnt>0)->b=frlcontrollerLink(fifoAlmostFullCnt>0,context=a.context,slotNumber=a.slotNumber,sessionid=a.sessionid,clockCount>a.clockCount)]
	insert into FrlBackpressure select (b.fifoAlmostFullCnt-a.fifoAlmostFullCnt)/(b.clockCount-a.clockCount) as bpFraction, b.slotNumber as slotNumber, b.linkNumber as linkNumber, b.timestamp.getTime() as timestamp, b.context as kontext;

@Description('window with positive backpressure values only')
create window FrlBackpressurePositive.std:unique(kontext, slotNumber, linkNumber) as select * from FrlBackpressure;
on FrlBackpressure(bpFraction=0) as bf delete from FrlBackpressurePositive b where bf.linkNumber = b.linkNumber and bf.slotNumber = b.slotNumber and bf.kontext=b.kontext;
insert into FrlBackpressurePositive select fb.* from FrlBackpressure as fb where fb.bpFraction>0;

@Description('Backpressure > 1%, alarm')
@Verbose(label='output', fields={'time','fedId','bp','timestamp'}, extraNfo='Backpressure:')
select date(x.timestamp) as time, x.timestamp as timestamp, fedId(x.kontext, x.slotNumber, x.linkNumber, CmsHw.FRL) as fedId, x.bpFraction as bp from FrlBackpressurePositive as x where x.bpFraction > 0.01;


@Description('FED dead-time > 1%')
@Verbose(label='output',fields={'time','fedId','dt','timestamp'}, extraNfo='Dead-time   :')
select fmm.timestamp as time, fmm.timestamp.getTime() as timestamp, fedId(fmm.context, fmm.geoslot, fmm.io, CmsHw.FMM) as fedId, fmm.fractionWarning+fmm.fractionBusy as dt from FMMInput((fractionWarning + fractionBusy) > 0.01) as fmm;

create variable int deadPressureOffset = 1800000;
create variable int deadPressureSpan = 1800000;

@Verbose(label='output-devel')
select date(b.timestamp) as bpTime, d.timestamp as dtTime, b.bpFraction as bpFraction, d.fractionBusy+d.fractionWarning as deadtime, fedId(b.kontext, b.slotNumber, b.linkNumber, CmsHw.FRL) as fedId 
    from pattern[every-distinct(d.timestamp, b.timestamp) ((timer:interval(deadPressureOffset msec) or (b=FrlBackpressurePositive and d=FMMInput((fractionWarning + fractionBusy) > 0.01)))where timer:within(deadPressureOffset msec))]
    where b is not null and d is not null and dtRelevantFedIds(d.context, d.geoslot, d.io).contains(fedId(b.kontext, b.slotNumber, b.linkNumber, CmsHw.FRL))
    and time_span(d.timestamp.getTime(), b.timestamp)<deadPressureSpan;


@Verbose(label='output-devel2')
select date(b.timestamp) as bpTime, d.timestamp as dtTime, b.bpFraction as bpFraction, d.fractionBusy+d.fractionWarning as deadtime, HwInfo.getInstance().getFedId(b.kontext, b.slotNumber, b.linkNumber, CmsHw.FRL) as fedId
    from pattern[every-distinct(d.timestamp, b.timestamp)
	(
		(	b=FrlBackpressurePositive -> d=FMMInput( (fractionWarning + fractionBusy)>0.01 ) where timer:within(deadPressureOffset msec)  )
		or 
		(	d=FMMInput(	(fractionBusy+fractionWarning)>0.01	)-> b=FrlBackpressurePositive where timer:within(deadPressureOffset msec)  )
	)] where HwInfo.getInstance().getFedId(b.kontext, b.slotNumber, b.linkNumber, CmsHw.FRL) = HwInfo.getInstance().getFedId(d.context, d.geoslot, d.io, CmsHw.FMM)
        and time_span(d.timestamp.getTime(), b.timestamp)<deadPressureSpan;
;