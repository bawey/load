/****** CREATE WORKING VIEWS / SCHEMAS ******/

/** FrlBackpressureStream [ bpFraction | kontext | slotNumber | linkNumber | timestamp ] **/
@Description('schema with current backpressure values for kontext, slotNumber, linkNumber')
create schema FrlBackpressureStream as (fedId Integer, bpFraction double, timestamp long);

/** FrlBackpressure [@FrlBackpressureStream] **/
@Description('window with positive backpressure values only')
create window FrlBackpressure.std:unique(fedId) as select * from FrlBackpressureStream;

/** FmmDeadtime [ dtFraction | kontext | geoslot | io | timestamp ] **/
create window FmmDeadtime.std:unique(fedId) as (fedId int, dtFraction double, timestamp long, mainFedIds int[]);

/** FedDeadPressure [dtTime, bpTime, dtFraction, bpFraction, fedId] **/
create window FedDeadPressure.std:unique(fedId) as (bpTime long, dtTime long, bpFraction double, dtFraction double, fedId int);

/** FedId [fedId] - holds fedIds of feds that stop reporting deadtime, along with fedIds of their mainFeds**/
create schema DeadtimeRecoveredFedId as Integer;

/** FrlCtlLnk [@frlcontrollerLink] **/
create schema FrlCtlLnk(fedId int) copyfrom frlcontrollerLink;

/** FmmInput [@FMMInput] **/
create schema FmmInput(fedId int) copyfrom FMMInput;

/** FedBpGone **/
create schema FedBpGone as (fedId Integer, timestamp Long, bpFraction double);

/** FedDtGone **/
create schema FedDtGone as (fedId Integer, mainFedIds Integer[], timestamp Long, dtFraction double);

/** FedBackpressureTemp [fedId | fifoAlmostFullCnt | clockCount] **/
create window FedBackpressureTemp.std:unique(fedId) as (fedId Integer, fifoAlmostFullCnt Long, clockCount Long);

/****** DECLARE THE INSERTION AND DELETION LOGIC (PREFERABLY MUTE), TOP-DOWN ORDER ******/

@Description('Timespan to look for DT and BP within. In msec.')
create variable int deadPressureSpan = 720000;

@Description('Threshold bp')
create variable double bpBound = 0.01;
create variable double dtBound = 0.01;

@Description('Populating FedDeadPressure window')
insert into FedDeadPressure select d.timestamp as dtTime, b.timestamp as bpTime, d.dtFraction as dtFraction, b.bpFraction as bpFraction, b.fedId as fedId from FmmDeadtime as d, FrlBackpressure as b where 
(b.fedId=d.fedId or in_array(b.fedId, d.mainFedIds)) and time_span(d.timestamp, b.timestamp) < deadPressureSpan;

@Description('Emptying FedDeadPressure window: 1/2')
on pattern[every (x=FedBpGone or y=FedDtGone)] delete from FedDeadPressure fdp where (x is not null and fdp.fedId = x.fedId) or (y is not null and fdp.fedId = y.fedId);

@Description('Emptying FedDeadPressure window: 2/2')
on FedDtGone as gone delete from FedDeadPressure fdp where in_array(fdp.fedId, gone.mainFedIds) and fdp.fedId not in (select fedId from FmmDeadtime);


@Description('Populating FmmDeadtime window')
insert into FmmDeadtime 
	select fi.fractionBusy+fi.fractionWarning as dtFraction, fi.timestamp.getTime() as timestamp, 
	fi.fedId as fedId, mainFedIds(fi.context, fi.geoslot, fi.io) as mainFedIds from FmmInput as fi where (fi.fractionBusy + fi.fractionWarning)>0.01;

@Description('Emptying FmmDeadtime window')
on FedDtGone as gone delete from FmmDeadtime as fd where fd.fedId = gone.fedId;

@Description('Populating FrlBackpressure window')
insert into FrlBackpressure select fb.* from FrlBackpressureStream as fb where fb.bpFraction>0;

@Description('Emptying FrlBackpressure window')
on FedBpGone as gone delete from FrlBackpressure fb where fb.fedId = gone.fedId;

/**STREAM SPLITTING FAILS
@Description('Populating FrlBackpressure and FrlBackpressureTemp window')
on FrlCtlLnk as ctl
	insert into FrlBackpressure select ((ctl.fifoAlmostFullCnt - tmp.fifoAlmostFullCnt) / (ctl.clockCount-tmp.clockCount)) as bpFraction, 
		ctl.fedId as fedId, ctl.timestamp.getTime() as timestamp
		from FedBackpressureTemp as tmps 
	insert into FedBackpressureTemp select ctl.fedId as fedId, ctl.fifoAlmostFullCnt as fifoAlmostFullCnt, ctl.clockCount as clockCount
	output all;
**/

@Verbose(label='FrlCtlLnk', fields={'fedId','timestamp', 'catchstamp', 'rawcatchstamp'})
select fedId, timestamp, date(catchstamp) as catchstamp, timestamp.getTime() as rawtimestamp, catchstamp as rawcatchstamp from FrlCtlLnk;

@Verbose(label='backpressure')
select a.fedId, a.timestamp, b.timestamp, b.fifoAlmostFullCnt-a.fifoAlmostFullCnt as almostFullDiff, (b.clockCount-a.clockCount) as clockDiff 
	from pattern[every a=FrlCtlLnk->b=FrlCtlLnk(fedId = a.fedId, fifoAlmostFullCnt> a.fifoAlmostFullCnt, clockCount>a.clockCount) 
	and not b=FrlCtlLnk(fedId = a.fedId, fifoAlmostFullCnt=a.fifoAlmostFullCnt)];


@Verbose(label='DtGoneSideTrack')
@Description('Populating FedDtGone')
insert into FedDtGone select fd.fedId as fedId, fd.mainFedIds as mainFedIds, fmi.timestamp.getTime() as timestamp, fmi.fractionWarning+fmi.fractionBusy as dtFraction 
	from FmmInput((fractionWarning+fractionBusy)<0.01).std:unique(context, geoslot, io) as fmi, FmmDeadtime as fd where fedId(fmi.context, fmi.geoslot, fmi.io, CmsHw.FMM)<=fd.fedId;


@Description('Populating FedBpGone')
insert into FedBpGone select fedId, timestamp, bpFraction from FrlBackpressureStream(bpFraction<0.01, fedId in (select fedId from FrlBackpressure));

/**
@Description('Populating FrlCtlLnk')
insert into FrlCtlLnk select *, fedId(x.context, x.slotNumber, x.linkNumber, CmsHw.FRL) as fedId from frlcontrollerLink as x 
	where fedId(x.context, x.slotNumber, x.linkNumber, CmsHw.FRL) in (select fedId from FedMask(slinkEnabled=true));
**/

on frlcontrollerLink(fedId(context, slotNumber, linkNumber, CmsHw.FRL) in (select fedId from FedMask(slinkEnabled=true))) as x
	insert into FrlCtlLnk select *, fedId(x.context, x.slotNumber, x.linkNumber, CmsHw.FRL) as fedId;

@Description('Populating FmmInput')
insert into FmmInput select *, fedId(x.context, x.geoslot, x.io, CmsHw.FMM) as fedId from FMMInput as x 
	where fedId(x.context, x.geoslot, x.io, CmsHw.FMM) in (select fedId from FedMask(ttsEnabled=true));

/****** DECLARE ADDITIONAL OUTPUT STATEMENTS ******/

@Description('Backpressure > 1%, alarm')
@Verbose(label='output', fields={'time','fedId','bp','timestamp'}, extraNfo='FED Backpressure:')
select date(x.timestamp) as time, x.timestamp as timestamp, fedId, x.bpFraction as bp from FrlBackpressure as x where x.bpFraction > 0.01;

@Description('FED dead-time > 1%')
@Verbose(label='output',fields={'time','fedId','dt','timestamp'}, extraNfo='FED Dead-time   :')
select date(fmm.timestamp) as time, fmm.timestamp as timestamp, fedId, fmm.dtFraction as dt from FmmDeadtime as fmm;

@Verbose(label='output', extraNfo='FED BP gone', fields={'date', 'fedId', 'bpFraction'})
select date(timestamp) as date, fedId, bpFraction from FedBpGone;

@Verbose(label='output', extraNfo='FED DT gone', fields={'date', 'fedId', 'dtFraction'})
select date(timestamp) as date, fedId, dtFraction from FedDtGone;

@Verbose(label='output', extraNfo='FED with BP+DT', fields={'dtTime','bpTime','fedId','dtFraction','bpFraction'})
select date(dtTime) as dtTime, date(bpTime) as bpTime, dtFraction, bpFraction, fedId from FedDeadPressure;

@Verbose(label='output', extraNfo='FED no longer with BP+DT', fields={'fedId'})
select rstream * from FedDeadPressure where fedId not in (select fedId from FedDeadPressure);

/****** DECLARE WATCHED STATEMENTS ******/
@Watched(label='DeadPressure FEDS#')
select count(*) from FedDeadPressure;

@Verbose(label='NewSTreams')
select fifoAlmostFullCnt, context, timestamp, date(catchstamp), fedId from FrlCtlLnk;



/** ALL THE NOT-SO USEFUL ANYMORE EPL 

@Verbose(label='output', extraNfo='Removing from FedDeadPressure')
insert into SomeStream select rstream * from FrlBackpressure;

@Verbose(label='SomeStream')
select * from SomeStream;

// or fdp.fedId not in (select fedId(fbp.kontext, fbp.slotNumber, fbp.linkNumber, CmsHw.FRL) from FrlBackpressure fbp);

//select fedId(fbp.kontext, fbp.slotNumber, fbp.linkNumber, CmsHw.FRL) as fedId from FrlBackpressure fbp;

@Verbose(label='deadPressure', append=false)
on pattern[every timer:interval(330 msec)] select fdp.* from FedDeadPressure as fdp;


@Verbose(label='output-devel')
select date(b.timestamp) as bpTime, d.timestamp as dtTime, b.bpFraction as bpFraction, d.fractionBusy+d.fractionWarning as deadtime, fedId(b.kontext, b.slotNumber, b.linkNumber, CmsHw.FRL) as fedId 
    from pattern[every-distinct(d.timestamp, b.timestamp) ((timer:interval(deadPressureOffset msec) or (d=FmmInput((fractionWarning + fractionBusy) > 0.01) and b=FrlBackpressure)))]
    where b is not null and d is not null and dtRelevantFedIds(d.context, d.geoslot, d.io).contains(fedId(b.kontext, b.slotNumber, b.linkNumber, CmsHw.FRL))
    and time_span(d.timestamp.getTime(), b.timestamp)<deadPressureSpan;



@Verbose(label='output-devel2')
select date(b.timestamp) as bpTime, d.timestamp as dtTime, b.bpFraction as bpFraction, d.fractionBusy+d.fractionWarning as deadtime, HwInfo.getInstance().getFedId(b.kontext, b.slotNumber, b.linkNumber, CmsHw.FRL) as fedId
    from pattern[every-distinct(d.timestamp, b.timestamp)
	(
		(	b=FrlBackpressure -> d=FmmInput( (fractionWarning + fractionBusy)>0.01 ) where timer:within(deadPressureOffset msec)  )
		or 
		(	d=FmmInput(	(fractionBusy+fractionWarning)>0.01	)-> b=FrlBackpressure where timer:within(deadPressureOffset msec)  )
	)] where HwInfo.getInstance().getFedId(b.kontext, b.slotNumber, b.linkNumber, CmsHw.FRL) = HwInfo.getInstance().getFedId(d.context, d.geoslot, d.io, CmsHw.FMM)
        and time_span(d.timestamp.getTime(), b.timestamp)<deadPressureSpan;
;

// this never seems to work. some evaluation seems to take place upon the b arrival, while the d is null ergo NPE
@Verbose(label='output-devel')
select date(b.timestamp) as bpTime, d.timestamp as dtTime, b.bpFraction as bpFraction, d.fractionBusy+d.fractionWarning as deadtime, fedId(b.kontext, b.slotNumber, b.linkNumber, CmsHw.FRL) as fedId 
    from pattern[every d=FmmInput((fractionWarning + fractionBusy) > 0.01) and every b=FrlBackpressure]
    where b is not null and d is not null and dtRelevantFedIds(d.context, d.geoslot, d.io).contains(fedId(b.kontext, b.slotNumber, b.linkNumber, CmsHw.FRL)) and time_span(d.timestamp.getTime(), b.timestamp) < deadPressureSpan;

//this looks fine, but consult the manual on the performance (perhaps a pattern guard has to be put in place)
@Verbose(label='output-devel2')
select date(b.timestamp) as bpTime, d.timestamp as dtTime, b.bpFraction as bpFraction, d.fractionBusy+d.fractionWarning as deadtime, HwInfo.getInstance().getFedId(b.kontext, b.slotNumber, b.linkNumber, CmsHw.FRL) as fedId
    from pattern[every
	(
		(	b=FrlBackpressure -> d=FmmInput( (fractionWarning + fractionBusy)>0.01 
			and dtRelevantFedIds(context, geoslot, io).contains(fedId(b.kontext, b.slotNumber, b.linkNumber, CmsHw.FRL))
			and time_span(timestamp.getTime(), b.timestamp) < deadPressureSpan)
		 )
		or 
		(	d=FmmInput(	(fractionBusy+fractionWarning)>0.01	)-> b=FrlBackpressure(
			dtRelevantFedIds(d.context, d.geoslot, d.io).contains(fedId(kontext, slotNumber, linkNumber, CmsHw.FRL))
			and time_span(d.timestamp.getTime(), timestamp) < deadPressureSpan)
		)
	)];

**/				
