#include "zeroRateContext.epl"

context L1ZeroRate create window FedResyncInfos.std:unique(fedId) as (fedId int, myrinetLastResyncEvt long, myrinetResync long, systime long);

@Description('When rate has been zero for long enough, count the clusters of myrinetLastResyncEvt values')
context L1ZeroRate 
	insert into 
		FedResyncInfos 
	select 
		lnk.fedId as fedId, 
		crd.myrinetLastResyncEvt as myrinetLastResyncEvt, 
		crd.myrinetResync as myrinetResync,
		current_timestamp() as systime
	from 	
		frlcontrollerCard.std:unique(context, slotNumber) as crd, 
		FrlCtlLnk.std:unique(fedId) as lnk
	where	
		lnk.context = crd.context and lnk.slotNumber = crd.slotNumber;


create objectarray schema FedResyncSummary as (systime long, lastResyncUniq long, resyncUniq long, fedsNo long);

context L1ZeroRate insert into FedResyncSummary 
	select
		current_timestamp() as systime,
		count(distinct myrinetLastResyncEvt) as lastResyncUniq,
		count(distinct myrinetResync) as resyncUniq,
		count(fedId) as fedsNo
	from 
		pattern[FedResyncInfos->(timer:interval(1 msec) and not FedResyncInfos)] unidirectional, FedResyncInfos
	output
		first every 10 seconds;

@Priority(10)
create context MyrinetLastResyncMisaligned
	start FedResyncSummary(lastResyncUniq>1)
	end FedResyncSummary(lastResyncUniq=1);

@Priority(10)
create context MyrinetResyncMisaligned
	start FedResyncSummary(resyncUniq>1)
	end FedResyncSummary(resyncUniq=1);

@Verbose(label="output2", fields={'systime','fedsNo','myrinetLastResyncEvt','feds'}, extraNfo="myrinetLastResyncEvt discrepancy" )
	context MyrinetLastResyncMisaligned
	select 
		date(x.systime) as systime, 
		count(fedId) as fedsNo, 
		myrinetLastResyncEvt, 
		reformat(window(x.*).aggregate("", (result, row) => result||format("%03d",row.fedId)||"-"),"-",", ") as feds
	from 
		pattern [every FedResyncSummary] unidirectional,
		FedResyncInfos as x 
	group by 
		myrinetLastResyncEvt
	order by 
		count(fedId) desc;


@Verbose(label="output2", fields={'systime','fedsNo','myrinetResync','feds'}, extraNfo="myrinetResync discrepancy")
	context MyrinetResyncMisaligned
	select 
		date(x.systime) as systime, 
		count(fedId) as fedsNo, 
		myrinetResync, 	
		reformat(window(x.*).aggregate("", (result, row) => result||format("%03d",row.fedId)||"-"),"-",", ") as feds
	from 
		pattern[every FedResyncSummary] unidirectional, 
		FedResyncInfos as x 
	group by 
		myrinetResync
	order by
		count(fedId) desc;


/** FEDS STUCK WIT BACKPRESSURE WITH ZERO RATE **/
@Verbose(label='output2', fields={'systime','feds','srctime'}, extraNfo='FEDs stuck with Backpressure at zero rate')
context L1ZeroRate
	select 
		date(max(b.timestamp)) as srctime, 
		date(current_timestamp()) as systime,
		reformat(window(b.*).aggregate("",(result, row)=>result||format("%03d", row.fedId)||"("||format(row.bpFraction)||")-"),"-",", ") as feds
	from 
		FrlBackpressure(timestamp is not null) as b,
		pattern[every FrlBackpressure->(timer:interval(1 msec) and not FrlBackpressure)] unidirectional
	output
		first every 5 seconds;


@Verbose(label='output2', fields={'systime','feds', 'srctime'}, extraNfo='FEDs stuck with Deadtime at zero rate')
context L1ZeroRate
	select 
		date(max(b.timestamp)) as srctime, 
		date(current_timestamp()) as systime, 
		reformat(window(b.*).aggregate("",(result, row)=>result||format("%03d", row.fedId)||"("||format(row.dtFraction)||")-"),"-",", ") as feds
	from 
		FmmDeadtime as b, 
		pattern[every FmmDeadtime->(timer:interval(1 msec) and not FmmDeadtime)] unidirectional
	output
		first every 5 seconds;

//needs folding too
@Verbose(label="output3", fields={'systime','fedId', 'dOos','dBusy','dWarning','dError','dIllegal', 'dTime', 'srctime'}, extraNfo='FED stuck')
context L1ZeroRate
	select 
		timestamp as srctime, 
		date(current_timestamp()) as systime, 
		fedId, 
		dTime, 
		dTime-(dBusy+dWarning+dError+dOos+dReady) as dIllegal, 
		dWarning, 
		dError, 
		dOos, 
		dBusy 
	from 
		FedFractions
	where 
		dTime>0 and (dBusy=dTime or dWarning=dTime or dError = dTime or dOos = dTime or (dBusy+dWarning+dError+dOos+dReady)=0);
