<?xml version="1.0" encoding="ISO-8859-1"?>
<?xml-stylesheet type="text/xsl" href="objectives.template.xsl" xmlns="http://www.w3.org/1999/xhtml"?>
<objectives>
<objectives_group name="General">
	<objective>
		<overview>Define severity-specific behaviors for produced results!</overview>
	</objective>
</objectives_group>
<objectives_group name="Running">
	<objective severity="info" status="question">
		<overview>Message on Run Start giving: Run NR, SID, Detectors in, (*)Feds in per detector</overview>
		<notes>Where is the run number(frlcontrollerCard.runNumber)? Where are detectors 'in'? How to resolve FEDs per detector? (like this? frl.getTTCPartition().getSubSystem())</notes>
		<details></details>
		<solution></solution>
		<epl></epl>
	</objective>
	<objective severity="info" status="question">
		<overview>Message on Run Stop giving: Run Nr, SID, Detectors in, (*)Feds in per detector, avg L1 rate, avg stream A rate, avg dead time (from trigger LAS), duration</overview>
		<notes>Same as for run start, but also: get avg L1 rate, avg stream A rate, avg dead time from trigger LAS, the duration</notes>
		<details></details>
		<solution></solution>
		<epl></epl>
		<notes>SMPerformance StreamNames ratePerStream "A" sum over SMs</notes>
	</objective>

	<objective severity="info" status="done">
		<overview>Message on L1 trigger rate jump > 10%</overview>
		<details></details>
		<solution>EPL file creates some windows and streams useful for performing other loigic. A javascript method needs to be raplaced with a case statement</solution>
		<epl>level1TriggerRate.epl</epl>
	</objective>

	<objective severity="info" status="done">
		<overview>Message on subsys going to {ERROR, RUNNING_DEGRADED, RUNNING_SOFT_ERROR_DETECTED, PAUSING, PAUSED, RESUMING}</overview>
		<details></details>
		<solution></solution>
		<epl>subsystemsStateChanges.epl</epl>
	</objective>
	<objective severity="alarm" status="done">
		<overview>Message on any state change of DAQ</overview>
		<details></details>
		<solution></solution>
		<epl>subsystemsStateChanges.epl</epl>
	</objective>
	<objective severity="alarm" status="done">
		<overview>Message on jobcontrol flashlist not being updated after 1 minute</overview>
		<details></details>
		<solution></solution>
		<epl>jobcontrolNotUpdated.epl</epl>
		<notes>did the machine crash?</notes>
	</objective>
	<objective severity="alarm" status="done">
		<overview>FED dead-time > 1% </overview>
		<details></details>
		<solution></solution>
		<epl>deadtimeAndBackpressure.epl</epl>
		<notes>investigate backpressure on the same FED or its main FED</notes>
	</objective>
	<objective severity="alarm" status="done">
		<overview>Backpressure > 1%</overview>
		<details></details>
		<solution></solution>
		<epl>deadtimeAndBackpressure.epl</epl>
	</objective>
	<objective severity="alarm" status="done">
		<overview>Message on stream A > 500 Hz</overview>
		<details></details>
		<solution></solution>
		<epl>streamARate.epl</epl>
		<notes>Simplified, does not satisfy: after 10 seconds, repeat message every 10 seconds. Need to sum the last-per-context values.</notes>
	</objective>
	<objective severity="warning" status="done">
		<overview>FEDs fraction other</overview>
		<solution>A FedFractions stream is constantly filled with derivatives computed for each subsequently arriving pair of FmmInput events with the same fedId.</solution>
		<notes>fractions (busy+warning+error+ready+oos) must add up to one, otherwise FED spends some time in an illegal (other) state. This fact should be reported and using integrals is preffered for calculations to avoid floating point numbers comparison. Why does it report negative fractions at the beginning? (As well as negative dTime). Never tested on positives.</notes>
		<epl>fedFractions.epl</epl>
	</objective>
</objectives_group>

<objectives_group name="Rate 0 for > 10 seconds">
	<objective status="fixed">
		<overview> Check Bx alignment and print message if not aligned repeat after 10 seconds</overview>
		<details></details>
		<solution></solution>
		<epl>rateZeroTests.epl</epl>
		<notes>Fails to repeat the message every 10 seconds if the problem persists</notes>
	</objective>
	<objective status="fixed">
		<overview>Check triggers(events) alignment + print message if not aligned repeat after 10 seconds</overview>
		<overview></overview>
		<details></details>
		<solution></solution>
		<epl>rateZeroTests.epl</epl>
		<notes>Fails to repeat the message every 10 seconds if the problem persists</notes>
	</objective>
	<objective status="done">
		<overview>FEDs stuck in ERROR/OOS/WARNING/BUSY(anything not READY)</overview>
		<details></details>
		<solution>Written, running, never seen working yet. Using the FedFractions stream to find events of interest and SuspendedStatements window to suspend/resume the statement upon reception of RateStuckAtZeroEvent or RateFineEvent defined in the same source file as a way to broadcast the message that the expert enters a state where the run is ongoing but the rate has been 0 for long enough or that the rate is fine and experiment is running.
		</solution>
		<notes>
			ERROR/OOS/WARNING/BUSY have their corresponding fractions on FMMInput. Stuck means fraction = 1. A FED might also be stuck in an other state. Use the integrals from two consecutive events to determine that. Needs to work ONLY at rate 0!
		</notes>
		<epl>rateZeroTests.epl</epl>
	</objective>
	<objective status="done">
		<overview>List FEDs with backpressure or deadtime</overview>
		<details></details>
		<solution></solution>
		<epl>rateZeroTests.epl</epl>
	</objective>
	<objective status="done">
		<overview>check if number of resyncs and the last resync event number is the same in all FEDs? </overview>
		<details></details>
		<solution></solution>
		<epl>rateZeroTests.epl</epl>
		<notes>Check if the number of resyncs is the same and check if the last event (the resync was seen for) is the same. myrinetResync - number of resync events, myrinetLastResyncEvt - last event that the resync was seen for.</notes>
	</objective>
</objectives_group>


<objectives_group name="Continuous display">
	<objective severity="info" status="done">
		<overview>Stream A rate</overview>
		<details></details>
		<solution></solution>
		<notes>Sum over the storage members (last-per-context values)</notes>
		<epl></epl>
	</objective>
	<objective severity="info" status="done">
		<overview>rate</overview>
		<details></details>
		<solution></solution>		
		<notes>Done for level one trigger rate.</notes>
		<epl>level1TriggerRate.epl</epl>
	</objective>
	<objective severity="info" status="done">
		<overview>resync rate + # of resyncs</overview>
		<details></details>
		<solution>Done on the assumption that frlcontrollerCard is associated with multiple frlcontrollerLinks via context and slotNumber equity. Displaying in Hz the rate of resyncs of fed 812 (d(myrinetResync)/d(timestamp) for two consecutive events ,never seen a value > 0 though). For the resync number simply the myrinetResync value is displayed.</solution>
		<epl>resyncRate.epl</epl>
		<notes>for fed 812 (trigger fed)</notes>
	</objective>
		<objective severity="info" status="done">
		<overview>event processing rate per group (group= nFOS=nMicroslots)</overview>
		<details></details>
		<solution>First a stream of "subrates" (ProcessorYields) is created and regularily populated with context, lid, units and a subrate calculated for two subsequent events with the same context and lid (B.nbProcessed - A.nbProcessed)/((B.timestamp.getTime()-A.timestamp.getTime())/1000.0). Next the subrates are stored in a window discarding all but the most recent value per each context-lid pair. (Window also discards events after 1 second). Results are generated by summing the subrates per group.
		</solution>
		<notes>Group is determined by epMicroStatesInt.length (or something alike). Event processing rate is a d(nbProcessed) over d(time)</notes>
		<epl>rateAndCpuPerGroup.epl</epl>
	</objective>
		<objective severity="info" status="done">
		<overview>CPU utilization per group (as above)</overview>
		<details></details>
		<solution>Solution similar to the events processing rate computation. Uses a different intermediate window not to run into problems due to the 1-second retention policy used for rate computing (perhaps needlessly?). Also, the select statement needs to use join between EventProcessorStatus(Snapshot) and hostInfo(.std:unique(context)) on the value of context attribute to access the CPU usage data. </solution>
		<notes>Group is determined like above. CPU usage per context (ports will differ from the EventProcessorStatus.context) can be found in hostInfo and hltCpuUsage flashlists.</notes>
		<epl>rateAndCpuPerGroup.epl</epl>
	</objective>
	<objective status="question">
			<overview>deadTime (from trigger LAS)</overview>
			<notes>Check the DAQ Doctor for details...</notes>
	</objective>
</objectives_group>

<!-- 
<objective>
	<overview></overview>
	<details></details>
	<solution></solution>
	<epl></epl>
</objective>
-->

</objectives>
