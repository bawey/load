#include "level1TriggerRate.epl"
#include "runStartStop.epl"
#include "deadtimeAndBackpressure.epl"
@Audit
create context L1ZeroRate 
	context RunOngoingNested start RunStart end RunStop,
	context L1ZeroRateNested start pattern[s=L1RatesStream(rate=0)->(timer:interval(10 seconds) and not L1RatesStream(rate>0))]
	end pattern[L1RatesStream(rate>0) or RunStop];


/** The following @Watched statements are debug-relevant only **/
@Watched(label="ZeroRateNestedContext tmr")
context L1ZeroRate select (current_timestamp()-context.L1ZeroRateNested.startTime)/1000.0 from pattern [every timer:interval(1 seconds)];

@Watched(label="RunOngoingNestedContext tmr")
context L1ZeroRate select (current_timestamp()-context.RunOngoingNested.startTime)/1000.0 from pattern [every timer:interval(1 seconds)];


create objectarray schema TrgNumbersSummary as (uniqueValuesCnt long, systime long, fedsNo long);
create objectarray schema BxNumbersSummary as (uniqueValuesCnt long, systime long, fedsNo long);

@Description('We need to retain bxNumbers and trgNumbers for the sake of performing the checks. Creating window within a context gets it reset every time the context restarts')

context L1ZeroRate create window FedsAlignmentIndicators.std:unique(fedSrcId) as (fedSrcId int, bxNumber long, trgNumber long, srctime Date);
context L1ZeroRate insert into FedsAlignmentIndicators select fedSrcId, bxNumber as bxNumber, triggerNumber as trgNumber, timestamp as srctime from FrlCtlLnk;

@Verbose(label="test", fields={"ctxid", "systime"})
context L1ZeroRate select context.id as ctxid, date(current_timestamp()) as systime from pattern[every timer:interval(5 sec)];

/** a check if the window is reset with evert context start - true!
@Verbose(label="context", fields={'fedSrcIds'})
context L1ZeroRate select count(fedSrcId) as fedSrcIds from FedsAlignmentIndicators;
**/

context L1ZeroRate insert into TrgNumbersSummary 
	select count(distinct x.trgNumber) as uniqueValuesCnt, current_timestamp() as systime, count(fedSrcId) as fedsNo
	from pattern[every FedsAlignmentIndicators -> (timer:interval(1 msec) and not FedsAlignmentIndicators)] unidirectional,
	FedsAlignmentIndicators as x output first every 10 seconds;

context L1ZeroRate insert into BxNumbersSummary
	select count(distinct x.bxNumber) as uniqueValuesCnt, current_timestamp() as systime, count(fedSrcId) as fedsNo
	from pattern[every FedsAlignmentIndicators -> (timer:interval(1 msec) and not FedsAlignmentIndicators)] unidirectional,
	FedsAlignmentIndicators as x output first every 10 seconds;

/** only for in-development testing 
@Verbose(label="summaries", fields={'systime', 'uniqueValuesCnt'}, extraNfo="TrgNumbersSummary")
select date(systime) as systime, uniqueValuesCnt from TrgNumbersSummary;
@Verbose(label="summaries", fields={'systime', 'uniqueValuesCnt'}, extraNfo="BxNumbersSummary")
select date(systime) as systime, uniqueValuesCnt from BxNumbersSummary;
**/

/** According to the docs, the event starting the context is available within it. However, 
we don't want the terminating event to be accesible for our output as it surely falls into
a different context
**/

@Priority(10)
create context TriggerNumbersMisaligned
	start a=TrgNumbersSummary(uniqueValuesCnt>1 and uniqueValuesCnt<5 and fedsNo > 10* uniqueValuesCnt)
	end pattern[L1RatesStream(rate>0) or RunStop or TrgNumbersSummary(uniqueValuesCnt=1 or uniqueValuesCnt>4 or fedsNo <= 10* uniqueValuesCnt)];

@Priority(10)
create context CrossingNumbersMisaligned
	start a=BxNumbersSummary(uniqueValuesCnt>1 and uniqueValuesCnt<5 and fedsNo > 10* uniqueValuesCnt)
	end pattern[L1RatesStream(rate>0) or RunStop or
	BxNumbersSummary(uniqueValuesCnt=1 or uniqueValuesCnt>4 or fedsNo <= 10* uniqueValuesCnt)];


@Priority(10)
create context TriggerNumbersScattered
	start TrgNumbersSummary(uniqueValuesCnt>4 or fedsNo <= 10* uniqueValuesCnt)
	end pattern[L1RatesStream(rate>0) or RunStop or
		TrgNumbersSummary(uniqueValuesCnt<5 and fedsNo > 10* uniqueValuesCnt)];

@Priority(10)
create context CrossingNumbersScattered
	start BxNumbersSummary(uniqueValuesCnt>4 or fedsNo <= 10* uniqueValuesCnt)
	end pattern[L1RatesStream(rate>0) or RunStop or 
		BxNumbersSummary(uniqueValuesCnt<5 and fedsNo > 10* uniqueValuesCnt)];


@Verbose(label="output", fields={"systime","msg"})
context TriggerNumbersScattered select cast(fedsNo, string)||" trigger numbers scattered into "||cast(uniqueValuesCnt, string)||" groups of unique values" as msg, 
	date(systime) as systime from TrgNumbersSummary;

@Verbose(label="output", fields={"systime","msg"})
context CrossingNumbersScattered select cast(fedsNo, string)||" bx numbers scattered into "||cast(uniqueValuesCnt, string)||" groups of unique values" as msg, 
	date(systime) as systime from BxNumbersSummary;

/** This checks if the event starting the context is picked up within it - according to docs it should and indeed it does
@Verbose(label="context2", fields={"systime","uniqueValuesCnt"}, extraNfo="Uniq trg numbers")
select uniqueValuesCnt, date(systime) as systime from TrgNumbersSummary;
**/


@Verbose(label="output", fields={"systime" ,"trgNumber", "fedsNo", "fingerprint","feds"}, extraNfo="TRG numbers misaligned")
context TriggerNumbersMisaligned 
	select 	trgNumber, 
			fedsInfoString(window(x.*).toMap(k=>k.fedSrcId, v=>null)) as feds,
		date(current_timestamp()) as systime, count(fedSrcId) as fedsNo
	from pattern[every TrgNumbersSummary ] unidirectional, FedsAlignmentIndicators as x group by trgNumber order by count(fedSrcId) desc;

@Verbose(label="output", fields={"systime" ,"bxNumber", "fedsNo", "fingerprint", "feds"}, extraNfo="BX numbers misaligned")
context CrossingNumbersMisaligned 
	select bxNumber, 
			fedsInfoString(window(x.*).toMap(k=>k.fedSrcId, v=>null)) as feds, 
		date(current_timestamp()) as systime, count(fedSrcId) as fedsNo
	from pattern[every BxNumbersSummary ] unidirectional, FedsAlignmentIndicators as x group by bxNumber order by count(fedSrcId) desc;


/**

There was some debugging when *NumbersMisaligned(Scattered) contexts were terminated only by an appropriate summary event indicating full consistency
Thus the rate going back up or the run ending would not terminate the context. This in turn would not produce any output as it 
(output triggered by summary events created exclusively from within L1ZeroRate context) until the L1ZeroRate context is active again
and sends summaries indicating misalignment. However, the *NumbersMisaligned context temporally spanning over more than one L1ZeroRates
context instances somehow alters the FedsAlignmentIndicators window's lifetime to span beyond the termination of its contents (L1Zerorates).
As a result one would get values from the past interleaving with current reports. 
Notably, using a triggered query, unlike and instead of unidirectional joins, yields a complain about FedsAlignmentIndicators 
being declared within different context.

@Verbose(label="xContext window access")
context CrossingNumbersMisaligned select x.*, date(current_timestamp()) as systime from FedsAlignmentIndicators as x, 
	pattern [every BxNumbersSummary] unidirectional;

create objectarray schema ContextStateStream as (dsc String, msg String);
**/

/**
	For the syntactical correctness, the from pattern[] is used here, but this is only to produce the message once the context is active or withhold it until
	the context terminates so that the corresponding message gets broadcasted.
**/

context TriggerNumbersMisaligned insert into ContextStateStream select "TRG numbers misaligned" as msg, context.name||" started" as dsc from pattern[FedsAlignmentIndicators];
context CrossingNumbersMisaligned insert into ContextStateStream select "BX numbers misaligned" as msg, context.name||" started" as dsc from pattern[FedsAlignmentIndicators];
context TriggerNumbersScattered insert into ContextStateStream select "TRG numbers scattered" as msg, context.name||" started" as dsc from pattern[FedsAlignmentIndicators];
context CrossingNumbersScattered insert into ContextStateStream select "BX numbers scattered" as msg, context.name||" started" as dsc from pattern[FedsAlignmentIndicators];

context TriggerNumbersMisaligned insert into ContextStateStream select "TRG no longer misaligned" as msg, context.name||" terminated" as dsc from pattern[FedsAlignmentIndicators] output when terminated;
context CrossingNumbersMisaligned insert into ContextStateStream select "BX no longer misaligned" as msg, context.name||" terminated" as dsc from pattern[FedsAlignmentIndicators] output when terminated;
context TriggerNumbersScattered insert into ContextStateStream select "TRG no longer scattered" as msg, context.name||" terminated" as dsc from pattern[FedsAlignmentIndicators] output when terminated;
context CrossingNumbersScattered insert into ContextStateStream select "BX no longer scattered" as msg, context.name||" terminated" as dsc from pattern[FedsAlignmentIndicators] output when terminated;


@Verbose(label="context-state-info", extraNfo="Context state changed", fields={'systime','msg','dsc'})
select date(current_timestamp()) as systime, msg, dsc from ContextStateStream;