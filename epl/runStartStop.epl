#include "fedMasks.epl"
#include "streamARate.epl"
#include "level1TriggerRate.epl"
#include "triggerLasDeadtime.epl"
#include "subsystemsStateChanges.epl"

create objectarray schema RunStart as (daqState String, systime Date, srctime Date);
create objectarray schema RunStop as (daqState String, systime Date, srctime Date);
@Description('Looks dummy and is a dummy, but allows a newly launched expert to broadcast a message about the run being stopped')
create objectarray schema RunStopped as ();

create variable boolean isRunOn = false;

on pattern[every RunStart] set isRunOn=true;
on pattern[every RunStop] set isRunOn=false;

@Watched(label='Running')
select isRunOn from pattern[every timer:interval(333 msec)];

insert into RunStop select p.toState as daqState, p.srctime as srctime, p.systime as systime from 
	pattern[every p=DaqStateChangeStream(toState in (
		'Configured', 'Halted', 'Resetting', 'Initial', 'Initializing', 'Configuring', 'Stopping', 'Halting', 'Destroying', 'Faulty'
	))] where isRunOn=true;

insert into RunStart select p.toState as daqState, p.srctime as srctime, p.systime as systime from 
	pattern[every p=DaqStateChangeStream(
		toState.startsWith('Running')
	)] where isRunOn=false;

/** initialize when the expert starts and knows not the current state**/
@Priority(0)
insert into RunStart select p.STATE as daqState, p.timestamp as srctime, date(p.fetchstamp) as systime 
	from pattern[p=levelZeroFM_subsys(SUBSYS='DAQ')] where p.STATE.startsWith('Running');

/** some information to present upon the end of the run **/
@Priority(0)
create context CurrentRun start RunStart end RunStop;

@Watched(label="RunOngoingContext tmr")
context CurrentRun select (current_timestamp()-context.startTime)/1000.0 from pattern [every timer:interval(1 seconds)];


create objectarray schema RunAvgRate as (rate double);
create objectarray schema RunAvgARate as (rate double);
create objectarray schema RunDuration as (mili long);
create objectarray schema RunAvgTrgLasDt as (dt double);

create expression runAvgRate {(select rate from RunAvgRate.win:length(1))};
create expression runAvgARate {(select rate from RunAvgARate.win:length(1))};
create expression runDuration {(select mili from RunDuration.win:length(1))};
create expression subsystems {(select window(SUBSYS).orderBy().aggregate("",(result, row)=>
	(result||(case when result.length()>0 then ", " else "" end)||row)) 
	from levelZeroFM_subsys(SID=sid).std:unique(SUBSYS) where INOUT='In')};
create expression runNumber {(select RUN_NUMBER from levelZeroFM_static.win:length(10).std:unique(SID) where SID=sid)};
create expression avgTrgLasDt {(select dt from RunAvgTrgLasDt.win:length(1))};


context CurrentRun insert into RunAvgARate select avg(rate) as rate from StreamRates where name='A';
context CurrentRun insert into RunAvgRate select avg(rate) as rate from L1RatesStream;
context CurrentRun insert into RunDuration select max(current_timestamp())-min(current_timestamp()) as mili from pattern [every timer:interval(100msec)];
context CurrentRun insert into RunAvgTrgLasDt select avg(dt) as dt from TriggerLasDtStream;

/** Message on Run Start giving: Run NR, SID, Detectors in, (*)Feds in per detectoroverview **/
@Verbose(label='output', extraNfo="RunStart", fields={'systime','sid','runNumber','detectors','fedsPerSubsystem'})
select sid, p.systime as systime, runNumber() as runNumber, fedsInfoString(activeFedSrcIds().toMap(k=>k, v=>null)) as fedsPerSubsystem, subsystems() as detectors from pattern [every p=RunStart] unidirectional;

/** Message on Run Stop giving: Run Nr, SID, Detectors in, (*)Feds in per detector, avg L1 rate, avg stream A rate, avg dead time (from trigger LAS), duration **/
@Priority(10)
@Verbose(label='output', extraNfo="Run Stop", fields={'systime','sid','runNumber','runDuration','avgRunRate','avgStreamARate', 'avgTrgLasDt', 'detectors', 'fedsPerSubsystem'})
select p.systime as systime, sid, subsystems() as detectors, runNumber() as runNumber, fedsInfoString(activeFedSrcIds().toMap(k=>k, v=>null)) as fedsPerSubsystem, 
	runAvgRate() as avgRunRate, runAvgARate() as avgStreamARate, formatMs(runDuration()) as runDuration, avgTrgLasDt() as avgTrgLasDt
	from pattern [every p=RunStop] unidirectional;


