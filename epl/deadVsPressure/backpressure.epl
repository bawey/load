@Description('schema with current backpressure values for kontext, slotNumber, linkNumber')
create schema FrlBackpressure as (bpFraction double, kontext String, slotNumber Integer, linkNumber Integer, timestamp String);
@Description('populating current backpressure stream')
on pattern[every a=frlcontrollerLink(fifoAlmostFullCnt>0)->b=frlcontrollerLink(fifoAlmostFullCnt>0,context=a.context,slotNumber=a.slotNumber,sessionid=a.sessionid,clockCount>a.clockCount)]
	insert into FrlBackpressure select (b.fifoAlmostFullCnt-a.fifoAlmostFullCnt)/(b.clockCount-a.clockCount) as bpFraction, b.slotNumber as slotNumber, b.linkNumber as linkNumber, b.timestamp as timestamp, b.context as kontext;

@Description('window with positive backpressure values only')
create window FrlBackpressurePositive.std:unique(kontext, slotNumber, linkNumber) as select * from FrlBackpressure;
on FrlBackpressure(bpFraction=0) as bf delete from FrlBackpressurePositive b where bf.linkNumber = b.linkNumber and bf.slotNumber = b.slotNumber and bf.kontext=b.kontext;
insert into FrlBackpressurePositive select fb.* from FrlBackpressure as fb where fb.bpFraction>0;

@Description('Backpressure > 1%, alarm')
@Verbose(label='output')
select x.timestamp as time, HwInfo.getInstance().getFedId(x.kontext, x.slotNumber, x.linkNumber, CmsHw.FRL) as fedId, x.bpFraction as bpFraction from FrlBackpressurePositive as x where x.bpFraction > 0.01;

