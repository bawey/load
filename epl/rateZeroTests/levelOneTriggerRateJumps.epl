@Description('variable to keep the current Session ID')
create variable String sid = '';
on levelZeroFM_dynamic(SID!=sid, FMURL like '%PublicGlobal%') as l set sid=l.SID;

@Description('create for EVM data. Keep only the most recent record per context-lid pair. Also, discard events older than 30 seconds')
create window subrates.std:unique(url,lid).win:time(30 sec) as (subrate Double, url String, lid String);

@Description('populate subrates with EventManagers data for current SessionID')
insert into subrates select deltaN/deltaT as subrate, context as url, lid from EVM where sessionid=sid and deltaT>0;

@Description('the last timestamp of EventManager flashlist with desired SessionID')
create variable String lastEVMtimestamp = '';
@Watched(label='lastEVM time')
on EVM(sessionid=sid) as evm set lastEVMtimestamp=evm.timestamp;

@Description('Window for all the RATES observed over the previous 60 seconds. ')
create window rates.win:time(60 sec) as (rate double);
@Description ('Populate rates with subsequently observed sums over the subrates')
on pattern[every timer:interval(300 msec)] insert into rates select sum(subrate) as rate from subrates;


@Description('Helper to filter out null average rates')
create expression double js:averageTriggerRate(n, m)[
//	importClass(java.lang.System)
//	System.out.println("received value n: "+n+" of type: "+typeof(n))
//	System.out.println("received value m: "+m+" of type: "+typeof(m))
	if(n!=null){ n }
	else if(m!=null){ m }
	else { 0 }
];

create variable Double avgTrgRate=null;
create variable Double indirectAvgTrgRate = null;
create variable Double lastEverRate=null;
@Description('Updates the average rate value for the last (up to) 60 seconds. Uses a chain of variables to avoid Math.round(null) call.')
on pattern[every r=rates] set lastEverRate = r.rate, indirectAvgTrgRate = (select avg(rate) as rate from rates).rate, avgTrgRate = Math.round(averageTriggerRate(indirectAvgTrgRate,lastEverRate));

@Description('Defines the jump threshold')
create variable double trgRateTolerance = 0.1;

@Priority(0)
on pattern[every a=rates(rate>(avgTrgRate*(1+trgRateTolerance)) or rate < (avgTrgRate*(1-trgRateTolerance)))] delete from rates;

@Description('Notify about rate jumps. Should send some error instead')
@Verbose(label='warning', extraNfo='Level one trigger rate jump!', fields={'trgRate','avgTrgRate','timestamp'})
@Priority(10)
select avgTrgRate, a.rate as trgRate, lastEVMtimestamp as timestamp from pattern[every a=rates(rate>(avgTrgRate*(1+trgRateTolerance)) or rate < (avgTrgRate*(1-trgRateTolerance)))];

@Description('Show the last average trigger rate')
@Watched
select avgTrgRate as value, lastEVMtimestamp as timestamp, 'avg rate' as label from rates;
@Description('Display the last rate. Looks weird, right?')
@Watched
select prior(1,rate) as value, 'trigger rate' as label, lastEVMtimestamp as timestamp from rates;
@Watched(label='EVM total')
select count(*) from EVM;

